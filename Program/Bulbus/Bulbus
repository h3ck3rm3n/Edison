#define przekaznik 19
#define darlington 12
#define czujka 13
#define poten 14
#define fotoRes 15
#define therm 16
#define dalmierz 18
#define button1 10
#define buzz 11

#include <Wire.h>
#include <rgb_lcd.h>
#include <Keypad.h>
rgb_lcd lcd;

unsigned long previousMillis = 0;
const long menuInterval = 500;

void setup() {
   Serial.begin(9600);
   pinMode(przekaznik, OUTPUT)
   pinMode(dalmierz, INPUT);
   pinMode(therm, INPUT);
   pinMode(fotoRes, INPUT);
   pinMode(poten, INPUT);
   pinMode(czujka, INPUT);
   pinMode(darlington, INPUT);
   pinMode(buzz, OUTPUT);
   pinMode(button1, INPUT);
   
   lcd.begin(16, 2); //initialize the module 
   lcd.setRGB(60, 60, 200);                 //set the color  
   lcd.setCursor(0, 0);                //set the position of cursor
   lcd.print("Inicjowanie...");
   delay(2300);
   lcd.clear();
   lcd.setCursor(0,0);
   lcd.print("OK.");
   delay(2000);
   lcd.clear();
   delay(1000);
   lcd.setCursor(0,0);
   lcd.print("Wprowadz haslo:");
   delay(1000);
   lcd.
}

void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= menuInterval) {
    previousMillis = currentMillis; 
    Menu();
    }
}

//MW 
bool menustart=true; //teraz włączone- gdy prawda, uruchamia funkcję menu.
//MW

//MS
//timery
unsigned long timer = 0;
unsigned long previousMillis1 = 0;
const long interval = 120000;
const long timeInterval = 1000;

int sec = 0;
int offTime = 0;
int t = 0;

//===
bool tryb = false;
int state = HIGH;
int reading;
int previous = LOW;
long debounce = 200; 
float treshold = 0.6;
float Rsensor;            // opornosc fotorezystora w kiloomach

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'#','0','*','D'}
};
byte rowPins[ROWS]={9,8,7,6};
byte colPins[COLS]={5,4,3,2};
char cutomKey;
Keypad customKeypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
#define Password_Lenght 6
char Data[Password_Lenght]; // 6 is the number of chars it can hold + the null char = 7
char Master[Password_Lenght] = "12345"; 
byte data_count = 0, master_count = 0;
bool Pass_is_good;
char customKey;

double temps() {
 double Temp;
 int RawADC = analogRead(therm);
 Temp = log(10000.0*((1024.0/RawADC-1)));
//         =log(10000.0/(1024.0/RawADC-1)) // for pull-up configuration
 Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp ))* Temp );
 Temp = Temp - 273.15;            // Convert Kelvin to Celcius
 return Temp;
}

float lux() {
  int sensorValue = analogRead(fotoRes); 
  Rsensor=(float)(1023-sensorValue)*10/sensorValue;
  int lx = map(Rsensor, 0, 1023, 50, 1000);
  return lx;
}

int dal() {
  int odl = analogRead(dal);
  odl = map(odl, 0, 1023, 0, 150);
  return odl;
}

void ruch() {
  float darl = analogRead(darlington);
  unsigned long currentMillis1 = millis();
  reading = digitalRead(button1);
  if (currentMillis1 - previousMillis1 >= timeInterval) {
    previousMillis1 = currentMillis1;
    sec++;
  } else {
    return;
  }   
  
  if (czujka==LOW && currentMillis1 - previousMillis1 >= timeInterval) {
    offTime++;
  } else {
    return;
  }
    
  if (czujka==LOW && offTime >3 && darl>=treshold && sec >=120 ) {
    digitalWrite(przekaznik, LOW);
    sec = 0;
    offTime = 0;
  } else {
    digitalWrite(przekaznik,HIGH);
  }
  if(reading == HIGH && previous == LOW && millis() - timer > debounce) {
    if (state == HIGH)  {
      state = LOW;
    } else {
      state = HIGH;

    timer = millis();
    }
  digitalWrite(przekaznik, state);
  previous = reading;
  }
}

//MS

//MW
void clearData()
{
  while(data_count !=0)
  {   // This can be used for any array size, 
    Data[data_count--] = 0; //clear array for new data
  }
  return;
}

void alarm() {
	if (tryb = true && czujka == HIGH) {
		digitalWrite(buzz, HIGH);
		delay(1);
		digitalWrite(buzz, LOW);
		delay(1);
	} else {
		return;
	}
}

void Menu() {
  if (customKey) {
    lcd.display();
    lcd.cursor();
  }
  
  lcd.setCursor(0,0);
  lcd.print("Wprowadz haslo:");
  customKey = customKeypad.getKey();
  
  if (customKey) {
    Data[data_count] = customKey; // store char into data array
    lcd.setCursor(data_count,1); // move cursor to show each new char
    lcd.print("*"); // print char at said cursor
    data_count++; // increment data array by 1 to store new char, also keep track of the 
  }
  
  if ((data_count == Password_Lenght-1) && (!strcmp(Data, Master))) {
     int pot = analogRead(poten);
     pot = map(pot, 0, 1023, 0, 4); 
        switch(pot)
        {
        case 0:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("1. Wylacz alarm"");
        lcd.setCursor(0, 1);
        lcd.print("2. Wlacz alarm");
        break;
        case 1:
        lcd.clear();
        lcd.print("3. Temp. i jasn.");
        lcd.print(temps());
        lcd.setCursor(0, 1);
        lcd.print("4. Wyloguj");
        lcd.print(lux());
        break;
        }
		
        if (customKey = NO_KEY) {
          t++;
          if (customKey) {
            t=0;
          }else if(t>=60) {
            clearData();
            lcd.noDisplay();
            lcd.noCursor();
          } else {
            return;
          }
        }
		switch (customKey)
		{
		case 1:
		lcd.clear();
		lcd.setCursor(0,0);
		lcd.print("Wylaczono!");
		tryb=false;
		break;
		case 2:
		lcd.clear();
		lcd.setCursor(0,0);
		lcd.print("Wlaczono!");
		tryb = true;
		break;
		case 3:
		lcd.clear();
		lcd.print(temps());
		lcd.print("°C");
		break;
		case 4:
		clearData();
        lcd.noDisplay();
        lcd.noCursor();
		break;
    delay(1);
}
}
